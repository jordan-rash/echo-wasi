// Generated by `wit-bindgen` 0.12.0. DO NOT EDIT!
#ifndef __BINDINGS_ECHO_H
#define __BINDINGS_ECHO_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  uint8_t*ptr;
  size_t len;
} echo_string_t;

// A "pollable" handle.
// 
// This is conceptually represents a `stream<_, _>`, or in other words,
// a stream that one can wait on, repeatedly, but which does not itself
// produce any data. It's temporary scaffolding until component-model's
// async features are ready.
// 
// And at present, it is a `u32` instead of being an actual handle, until
// the wit-bindgen implementation of handles and resources is ready.
// 
// `pollable` lifetimes are not automatically managed. Users must ensure
// that they do not outlive the resource they reference.
// 
// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
typedef uint32_t wasi_poll_poll_pollable_t;

typedef struct {
  wasi_poll_poll_pollable_t *ptr;
  size_t len;
} echo_list_wasi_poll_poll_pollable_t;

typedef struct {
  bool *ptr;
  size_t len;
} echo_list_bool_t;

typedef wasi_poll_poll_pollable_t wasi_io_streams_pollable_t;

// Streams provide a sequence of data and then end; once they end, they
// no longer provide any further data.
// 
// For example, a stream reading from a file ends when the stream reaches
// the end of the file. For another example, a stream reading from a
// socket ends when the socket is closed.
typedef uint8_t wasi_io_streams_stream_status_t;

// The stream is open and may produce further data.
#define WASI_IO_STREAMS_STREAM_STATUS_OPEN 0
// When reading, this indicates that the stream will not produce
// further data.
// When writing, this indicates that the stream will no longer be read.
// Further writes are still permitted.
#define WASI_IO_STREAMS_STREAM_STATUS_ENDED 1

// An input bytestream. In the future, this will be replaced by handle
// types.
// 
// `input-stream`s are *non-blocking* to the extent practical on underlying
// platforms. I/O operations always return promptly; if fewer bytes are
// promptly available than requested, they return the number of bytes promptly
// available, which could even be zero. To wait for data to be available,
// use the `subscribe-to-input-stream` function to obtain a `pollable` which
// can be polled for using `wasi:poll/poll.poll_oneoff`.
// 
// And at present, it is a `u32` instead of being an actual handle, until
// the wit-bindgen implementation of handles and resources is ready.
// 
// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
typedef uint32_t wasi_io_streams_input_stream_t;

// An output bytestream. In the future, this will be replaced by handle
// types.
// 
// `output-stream`s are *non-blocking* to the extent practical on
// underlying platforms. Except where specified otherwise, I/O operations also
// always return promptly, after the number of bytes that can be written
// promptly, which could even be zero. To wait for the stream to be ready to
// accept data, the `subscribe-to-output-stream` function to obtain a
// `pollable` which can be polled for using `wasi:poll`.
// 
// And at present, it is a `u32` instead of being an actual handle, until
// the wit-bindgen implementation of handles and resources is ready.
// 
// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
typedef uint32_t wasi_io_streams_output_stream_t;

// An error for output-stream operations.
// 
// Contrary to input-streams, a closed output-stream is reported using
// an error.
typedef uint8_t wasi_io_streams_write_error_t;

// The last operation (a write or flush) failed before completion.
#define WASI_IO_STREAMS_WRITE_ERROR_LAST_OPERATION_FAILED 0
// The stream is closed: no more input will be accepted by the
// stream. A closed output-stream will return this error on all
// future operations.
#define WASI_IO_STREAMS_WRITE_ERROR_CLOSED 1

typedef struct {
  uint8_t *ptr;
  size_t len;
} echo_list_u8_t;

typedef struct {
  echo_list_u8_t f0;
  wasi_io_streams_stream_status_t f1;
} echo_tuple2_list_u8_wasi_io_streams_stream_status_t;

typedef struct {
  bool is_err;
  union {
    echo_tuple2_list_u8_wasi_io_streams_stream_status_t ok;
  } val;
} echo_result_tuple2_list_u8_wasi_io_streams_stream_status_void_t;

typedef struct {
  uint64_t f0;
  wasi_io_streams_stream_status_t f1;
} echo_tuple2_u64_wasi_io_streams_stream_status_t;

typedef struct {
  bool is_err;
  union {
    echo_tuple2_u64_wasi_io_streams_stream_status_t ok;
  } val;
} echo_result_tuple2_u64_wasi_io_streams_stream_status_void_t;

typedef struct {
  bool is_err;
  union {
    uint64_t ok;
    wasi_io_streams_write_error_t err;
  } val;
} echo_result_u64_wasi_io_streams_write_error_t;

typedef struct {
  bool is_err;
  union {
    wasi_io_streams_write_error_t err;
  } val;
} echo_result_void_wasi_io_streams_write_error_t;

typedef wasi_io_streams_input_stream_t wasi_http_types_input_stream_t;

typedef wasi_io_streams_output_stream_t wasi_http_types_output_stream_t;

typedef wasi_poll_poll_pollable_t wasi_http_types_pollable_t;

typedef struct {
  uint8_t tag;
  union {
    echo_string_t other;
  } val;
} wasi_http_types_method_t;

#define WASI_HTTP_TYPES_METHOD_GET 0
#define WASI_HTTP_TYPES_METHOD_HEAD 1
#define WASI_HTTP_TYPES_METHOD_POST 2
#define WASI_HTTP_TYPES_METHOD_PUT 3
#define WASI_HTTP_TYPES_METHOD_DELETE 4
#define WASI_HTTP_TYPES_METHOD_CONNECT 5
#define WASI_HTTP_TYPES_METHOD_OPTIONS 6
#define WASI_HTTP_TYPES_METHOD_TRACE 7
#define WASI_HTTP_TYPES_METHOD_PATCH 8
#define WASI_HTTP_TYPES_METHOD_OTHER 9

typedef struct {
  uint8_t tag;
  union {
    echo_string_t other;
  } val;
} wasi_http_types_scheme_t;

#define WASI_HTTP_TYPES_SCHEME_HTTP 0
#define WASI_HTTP_TYPES_SCHEME_HTTPS 1
#define WASI_HTTP_TYPES_SCHEME_OTHER 2

typedef struct {
  uint8_t tag;
  union {
    echo_string_t invalid_url;
    echo_string_t timeout_error;
    echo_string_t protocol_error;
    echo_string_t unexpected_error;
  } val;
} wasi_http_types_error_t;

#define WASI_HTTP_TYPES_ERROR_INVALID_URL 0
#define WASI_HTTP_TYPES_ERROR_TIMEOUT_ERROR 1
#define WASI_HTTP_TYPES_ERROR_PROTOCOL_ERROR 2
#define WASI_HTTP_TYPES_ERROR_UNEXPECTED_ERROR 3

typedef uint32_t wasi_http_types_fields_t;

typedef wasi_http_types_fields_t wasi_http_types_headers_t;

typedef wasi_http_types_fields_t wasi_http_types_trailers_t;

typedef wasi_http_types_input_stream_t wasi_http_types_incoming_stream_t;

typedef wasi_http_types_output_stream_t wasi_http_types_outgoing_stream_t;

typedef uint32_t wasi_http_types_future_trailers_t;

typedef uint32_t wasi_http_types_future_write_trailers_result_t;

typedef uint32_t wasi_http_types_incoming_request_t;

typedef uint32_t wasi_http_types_outgoing_request_t;

typedef struct {
  bool is_some;
  uint32_t val;
} echo_option_u32_t;

typedef struct {
  echo_option_u32_t connect_timeout_ms;
  echo_option_u32_t first_byte_timeout_ms;
  echo_option_u32_t between_bytes_timeout_ms;
} wasi_http_types_request_options_t;

typedef uint32_t wasi_http_types_response_outparam_t;

typedef uint16_t wasi_http_types_status_code_t;

typedef uint32_t wasi_http_types_incoming_response_t;

typedef uint32_t wasi_http_types_outgoing_response_t;

typedef uint32_t wasi_http_types_future_incoming_response_t;

typedef struct {
  echo_string_t f0;
  echo_list_u8_t f1;
} echo_tuple2_string_list_u8_t;

typedef struct {
  echo_tuple2_string_list_u8_t *ptr;
  size_t len;
} echo_list_tuple2_string_list_u8_t;

typedef struct {
  echo_list_u8_t *ptr;
  size_t len;
} echo_list_list_u8_t;

typedef struct {
  bool is_some;
  wasi_http_types_future_trailers_t val;
} echo_option_wasi_http_types_future_trailers_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_trailers_t ok;
    wasi_http_types_error_t err;
  } val;
} echo_result_wasi_http_types_trailers_wasi_http_types_error_t;

typedef struct {
  bool is_some;
  echo_result_wasi_http_types_trailers_wasi_http_types_error_t val;
} echo_option_result_wasi_http_types_trailers_wasi_http_types_error_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_error_t err;
  } val;
} echo_result_void_wasi_http_types_error_t;

typedef struct {
  bool is_some;
  echo_result_void_wasi_http_types_error_t val;
} echo_option_result_void_wasi_http_types_error_t;

typedef struct {
  bool is_some;
  echo_string_t val;
} echo_option_string_t;

typedef struct {
  bool is_some;
  wasi_http_types_scheme_t val;
} echo_option_wasi_http_types_scheme_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_incoming_stream_t ok;
  } val;
} echo_result_wasi_http_types_incoming_stream_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_outgoing_request_t ok;
    wasi_http_types_error_t err;
  } val;
} echo_result_wasi_http_types_outgoing_request_wasi_http_types_error_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_outgoing_stream_t ok;
  } val;
} echo_result_wasi_http_types_outgoing_stream_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_outgoing_response_t ok;
    wasi_http_types_error_t err;
  } val;
} echo_result_wasi_http_types_outgoing_response_wasi_http_types_error_t;

typedef struct {
  bool is_err;
} echo_result_void_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_types_incoming_response_t ok;
    wasi_http_types_error_t err;
  } val;
} echo_result_wasi_http_types_incoming_response_wasi_http_types_error_t;

typedef struct {
  bool is_some;
  echo_result_wasi_http_types_incoming_response_wasi_http_types_error_t val;
} echo_option_result_wasi_http_types_incoming_response_wasi_http_types_error_t;

typedef wasi_http_types_incoming_request_t wasi_http_incoming_handler_incoming_request_t;

typedef wasi_http_types_response_outparam_t wasi_http_incoming_handler_response_outparam_t;

// A log level, describing a kind of message.
typedef uint8_t wasi_logging_logging_level_t;

// Describes messages about the values of variables and the flow of
// control within a program.
#define WASI_LOGGING_LOGGING_LEVEL_TRACE 0
// Describes messages likely to be of interest to someone debugging a
// program.
#define WASI_LOGGING_LOGGING_LEVEL_DEBUG 1
// Describes messages likely to be of interest to someone monitoring a
// program.
#define WASI_LOGGING_LOGGING_LEVEL_INFO 2
// Describes messages indicating hazardous situations.
#define WASI_LOGGING_LOGGING_LEVEL_WARN 3
// Describes messages indicating serious errors.
#define WASI_LOGGING_LOGGING_LEVEL_ERROR 4
// Describes messages indicating fatal errors.
#define WASI_LOGGING_LOGGING_LEVEL_CRITICAL 5

// Imported Functions from `wasi:logging/logging`
// Emit a log message.
// 
// A log message has a `level` describing what kind of message is being
// sent, a context, which is an uninterpreted string meant to help
// consumers group similar messages, and a string containing the message
// text.
extern void wasi_logging_logging_log(wasi_logging_logging_level_t level, echo_string_t *context, echo_string_t *message);

// Imported Functions from `wasi:poll/poll`
// Dispose of the specified `pollable`, after which it may no longer
// be used.
extern void wasi_poll_poll_drop_pollable(wasi_poll_poll_pollable_t this_);
// Poll for completion on a set of pollables.
// 
// This function takes a list of pollables, which identify I/O sources of
// interest, and waits until one or more of the events is ready for I/O.
// 
// The result `list<bool>` is the same length as the argument
// `list<pollable>`, and indicates the readiness of each corresponding
// element in that list, with true indicating ready. A single call can
// return multiple true elements.
// 
// A timeout can be implemented by adding a pollable from the
// wasi-clocks API to the list.
// 
// This function does not return a `result`; polling in itself does not
// do any I/O so it doesn't fail. If any of the I/O sources identified by
// the pollables has an error, it is indicated by marking the source as
// ready in the `list<bool>`.
// 
// The "oneoff" in the name refers to the fact that this function must do a
// linear scan through the entire list of subscriptions, which may be
// inefficient if the number is large and the same subscriptions are used
// many times. In the future, this is expected to be obsoleted by the
// component model async proposal, which will include a scalable waiting
// facility.
extern void wasi_poll_poll_poll_oneoff(echo_list_wasi_poll_poll_pollable_t *in, echo_list_bool_t *ret);

// Imported Functions from `wasi:io/streams`
// Perform a non-blocking read from the stream.
// 
// This function returns a list of bytes containing the data that was
// read, along with a `stream-status` which, indicates whether further
// reads are expected to produce data. The returned list will contain up to
// `len` bytes; it may return fewer than requested, but not more. An
// empty list and `stream-status:open` indicates no more data is
// available at this time, and that the pollable given by
// `subscribe-to-input-stream` will be ready when more data is available.
// 
// Once a stream has reached the end, subsequent calls to `read` or
// `skip` will always report `stream-status:ended` rather than producing more
// data.
// 
// When the caller gives a `len` of 0, it represents a request to read 0
// bytes. This read should  always succeed and return an empty list and
// the current `stream-status`.
// 
// The `len` parameter is a `u64`, which could represent a list of u8 which
// is not possible to allocate in wasm32, or not desirable to allocate as
// as a return value by the callee. The callee may return a list of bytes
// less than `len` in size while more bytes are available for reading.
extern void wasi_io_streams_read(wasi_io_streams_input_stream_t this_, uint64_t len, echo_result_tuple2_list_u8_wasi_io_streams_stream_status_void_t *ret);
// Read bytes from a stream, after blocking until at least one byte can
// be read. Except for blocking, identical to `read`.
extern void wasi_io_streams_blocking_read(wasi_io_streams_input_stream_t this_, uint64_t len, echo_result_tuple2_list_u8_wasi_io_streams_stream_status_void_t *ret);
// Skip bytes from a stream.
// 
// This is similar to the `read` function, but avoids copying the
// bytes into the instance.
// 
// Once a stream has reached the end, subsequent calls to read or
// `skip` will always report end-of-stream rather than producing more
// data.
// 
// This function returns the number of bytes skipped, along with a
// `stream-status` indicating whether the end of the stream was
// reached. The returned value will be at most `len`; it may be less.
extern void wasi_io_streams_skip(wasi_io_streams_input_stream_t this_, uint64_t len, echo_result_tuple2_u64_wasi_io_streams_stream_status_void_t *ret);
// Skip bytes from a stream, after blocking until at least one byte
// can be skipped. Except for blocking behavior, identical to `skip`.
extern void wasi_io_streams_blocking_skip(wasi_io_streams_input_stream_t this_, uint64_t len, echo_result_tuple2_u64_wasi_io_streams_stream_status_void_t *ret);
// Create a `pollable` which will resolve once either the specified stream
// has bytes available to read or the other end of the stream has been
// closed.
// The created `pollable` is a child resource of the `input-stream`.
// Implementations may trap if the `input-stream` is dropped before
// all derived `pollable`s created with this function are dropped.
extern wasi_io_streams_pollable_t wasi_io_streams_subscribe_to_input_stream(wasi_io_streams_input_stream_t this_);
// Dispose of the specified `input-stream`, after which it may no longer
// be used.
// Implementations may trap if this `input-stream` is dropped while child
// `pollable` resources are still alive.
// After this `input-stream` is dropped, implementations may report any
// corresponding `output-stream` has `stream-state.closed`.
extern void wasi_io_streams_drop_input_stream(wasi_io_streams_input_stream_t this_);
// Check readiness for writing. This function never blocks.
// 
// Returns the number of bytes permitted for the next call to `write`,
// or an error. Calling `write` with more bytes than this function has
// permitted will trap.
// 
// When this function returns 0 bytes, the `subscribe-to-output-stream`
// pollable will become ready when this function will report at least
// 1 byte, or an error.
extern void wasi_io_streams_check_write(wasi_io_streams_output_stream_t this_, echo_result_u64_wasi_io_streams_write_error_t *ret);
// Perform a write. This function never blocks.
// 
// Precondition: check-write gave permit of Ok(n) and contents has a
// length of less than or equal to n. Otherwise, this function will trap.
// 
// returns Err(closed) without writing if the stream has closed since
// the last call to check-write provided a permit.
extern void wasi_io_streams_write(wasi_io_streams_output_stream_t this_, echo_list_u8_t *contents, echo_result_void_wasi_io_streams_write_error_t *ret);
// Perform a write of up to 4096 bytes, and then flush the stream. Block
// until all of these operations are complete, or an error occurs.
// 
// This is a convenience wrapper around the use of `check-write`,
// `subscribe-to-output-stream`, `write`, and `flush`, and is implemented
// with the following pseudo-code:
// 
// ```text
// let pollable = subscribe-to-output-stream(this);
// while !contents.is_empty() {
  // // Wait for the stream to become writable
  // poll-oneoff(pollable);
  // let Ok(n) = check-write(this); // eliding error handling
  // let len = min(n, contents.len());
  // let (chunk, rest) = contents.split_at(len);
  // write(this, chunk);            // eliding error handling
  // contents = rest;
  // }
  // flush(this);
  // // Wait for completion of `flush`
  // poll-oneoff(pollable);
  // // Check for any errors that arose during `flush`
  // let _ = check-write(this);       // eliding error handling
  // ```
  extern void wasi_io_streams_blocking_write_and_flush(wasi_io_streams_output_stream_t this_, echo_list_u8_t *contents, echo_result_void_wasi_io_streams_write_error_t *ret);
  // Request to flush buffered output. This function never blocks.
  // 
  // This tells the output-stream that the caller intends any buffered
  // output to be flushed. the output which is expected to be flushed
  // is all that has been passed to `write` prior to this call.
  // 
  // Upon calling this function, the `output-stream` will not accept any
  // writes (`check-write` will return `ok(0)`) until the flush has
  // completed. The `subscribe-to-output-stream` pollable will become ready
  // when the flush has completed and the stream can accept more writes.
  extern void wasi_io_streams_flush(wasi_io_streams_output_stream_t this_, echo_result_void_wasi_io_streams_write_error_t *ret);
  // Request to flush buffered output, and block until flush completes
  // and stream is ready for writing again.
  extern void wasi_io_streams_blocking_flush(wasi_io_streams_output_stream_t this_, echo_result_void_wasi_io_streams_write_error_t *ret);
  // Create a `pollable` which will resolve once the output-stream
  // is ready for more writing, or an error has occured. When this
  // pollable is ready, `check-write` will return `ok(n)` with n>0, or an
  // error.
  // 
  // If the stream is closed, this pollable is always ready immediately.
  // 
  // The created `pollable` is a child resource of the `output-stream`.
  // Implementations may trap if the `output-stream` is dropped before
  // all derived `pollable`s created with this function are dropped.
  extern wasi_io_streams_pollable_t wasi_io_streams_subscribe_to_output_stream(wasi_io_streams_output_stream_t this_);
  // Write zeroes to a stream.
  // 
  // this should be used precisely like `write` with the exact same
  // preconditions (must use check-write first), but instead of
  // passing a list of bytes, you simply pass the number of zero-bytes
  // that should be written.
  extern void wasi_io_streams_write_zeroes(wasi_io_streams_output_stream_t this_, uint64_t len, echo_result_void_wasi_io_streams_write_error_t *ret);
  // Read from one stream and write to another.
  // 
  // This function returns the number of bytes transferred; it may be less
  // than `len`.
  // 
  // Unlike other I/O functions, this function blocks until all the data
  // read from the input stream has been written to the output stream.
  extern void wasi_io_streams_splice(wasi_io_streams_output_stream_t this_, wasi_io_streams_input_stream_t src, uint64_t len, echo_result_tuple2_u64_wasi_io_streams_stream_status_void_t *ret);
  // Read from one stream and write to another, with blocking.
  // 
  // This is similar to `splice`, except that it blocks until at least
  // one byte can be read.
  extern void wasi_io_streams_blocking_splice(wasi_io_streams_output_stream_t this_, wasi_io_streams_input_stream_t src, uint64_t len, echo_result_tuple2_u64_wasi_io_streams_stream_status_void_t *ret);
  // Forward the entire contents of an input stream to an output stream.
  // 
  // This function repeatedly reads from the input stream and writes
  // the data to the output stream, until the end of the input stream
  // is reached, or an error is encountered.
  // 
  // Unlike other I/O functions, this function blocks until the end
  // of the input stream is seen and all the data has been written to
  // the output stream.
  // 
  // This function returns the number of bytes transferred, and the status of
  // the output stream.
  extern void wasi_io_streams_forward(wasi_io_streams_output_stream_t this_, wasi_io_streams_input_stream_t src, echo_result_tuple2_u64_wasi_io_streams_stream_status_void_t *ret);
  // Dispose of the specified `output-stream`, after which it may no longer
  // be used.
  // Implementations may trap if this `output-stream` is dropped while
  // child `pollable` resources are still alive.
  // After this `output-stream` is dropped, implementations may report any
  // corresponding `input-stream` has `stream-state.closed`.
  extern void wasi_io_streams_drop_output_stream(wasi_io_streams_output_stream_t this_);
  
  // Imported Functions from `wasi:http/types`
  extern void wasi_http_types_drop_fields(wasi_http_types_fields_t fields);
  extern wasi_http_types_fields_t wasi_http_types_new_fields(echo_list_tuple2_string_list_u8_t *entries);
  extern void wasi_http_types_fields_get(wasi_http_types_fields_t fields, echo_string_t *name, echo_list_list_u8_t *ret);
  extern void wasi_http_types_fields_set(wasi_http_types_fields_t fields, echo_string_t *name, echo_list_list_u8_t *value);
  extern void wasi_http_types_fields_delete(wasi_http_types_fields_t fields, echo_string_t *name);
  extern void wasi_http_types_fields_append(wasi_http_types_fields_t fields, echo_string_t *name, echo_list_u8_t *value);
  extern void wasi_http_types_fields_entries(wasi_http_types_fields_t fields, echo_list_tuple2_string_list_u8_t *ret);
  extern wasi_http_types_fields_t wasi_http_types_fields_clone(wasi_http_types_fields_t fields);
  extern void wasi_http_types_finish_incoming_stream(wasi_http_types_incoming_stream_t s, echo_option_wasi_http_types_future_trailers_t *ret);
  extern void wasi_http_types_finish_outgoing_stream(wasi_http_types_outgoing_stream_t s);
  extern wasi_http_types_future_write_trailers_result_t wasi_http_types_finish_outgoing_stream_with_trailers(wasi_http_types_outgoing_stream_t s, wasi_http_types_trailers_t trailers);
  extern void wasi_http_types_drop_future_trailers(wasi_http_types_future_trailers_t f);
  extern void wasi_http_types_future_trailers_get(wasi_http_types_future_trailers_t f, echo_option_result_wasi_http_types_trailers_wasi_http_types_error_t *ret);
  extern wasi_http_types_pollable_t wasi_http_types_listen_to_future_trailers(wasi_http_types_future_trailers_t f);
  extern void wasi_http_types_drop_future_write_trailers_result(wasi_http_types_future_write_trailers_result_t f);
  extern void wasi_http_types_future_write_trailers_result_get(wasi_http_types_future_write_trailers_result_t f, echo_option_result_void_wasi_http_types_error_t *ret);
  extern wasi_http_types_pollable_t wasi_http_types_listen_to_future_write_trailers_result(wasi_http_types_future_write_trailers_result_t f);
  extern void wasi_http_types_drop_incoming_request(wasi_http_types_incoming_request_t request);
  extern void wasi_http_types_drop_outgoing_request(wasi_http_types_outgoing_request_t request);
  extern void wasi_http_types_incoming_request_method(wasi_http_types_incoming_request_t request, wasi_http_types_method_t *ret);
  extern void wasi_http_types_incoming_request_path_with_query(wasi_http_types_incoming_request_t request, echo_option_string_t *ret);
  extern void wasi_http_types_incoming_request_scheme(wasi_http_types_incoming_request_t request, echo_option_wasi_http_types_scheme_t *ret);
  extern void wasi_http_types_incoming_request_authority(wasi_http_types_incoming_request_t request, echo_option_string_t *ret);
  extern wasi_http_types_headers_t wasi_http_types_incoming_request_headers(wasi_http_types_incoming_request_t request);
  extern void wasi_http_types_incoming_request_consume(wasi_http_types_incoming_request_t request, echo_result_wasi_http_types_incoming_stream_void_t *ret);
  extern void wasi_http_types_new_outgoing_request(wasi_http_types_method_t *method, echo_option_string_t *path_with_query, echo_option_wasi_http_types_scheme_t *scheme, echo_option_string_t *authority, wasi_http_types_headers_t headers, echo_result_wasi_http_types_outgoing_request_wasi_http_types_error_t *ret);
  extern void wasi_http_types_outgoing_request_write(wasi_http_types_outgoing_request_t request, echo_result_wasi_http_types_outgoing_stream_void_t *ret);
  extern void wasi_http_types_drop_response_outparam(wasi_http_types_response_outparam_t response);
  extern void wasi_http_types_set_response_outparam(wasi_http_types_response_outparam_t param, echo_result_wasi_http_types_outgoing_response_wasi_http_types_error_t *response, echo_result_void_void_t *ret);
  extern void wasi_http_types_drop_incoming_response(wasi_http_types_incoming_response_t response);
  extern void wasi_http_types_drop_outgoing_response(wasi_http_types_outgoing_response_t response);
  extern wasi_http_types_status_code_t wasi_http_types_incoming_response_status(wasi_http_types_incoming_response_t response);
  extern wasi_http_types_headers_t wasi_http_types_incoming_response_headers(wasi_http_types_incoming_response_t response);
  extern void wasi_http_types_incoming_response_consume(wasi_http_types_incoming_response_t response, echo_result_wasi_http_types_incoming_stream_void_t *ret);
  extern void wasi_http_types_new_outgoing_response(wasi_http_types_status_code_t status_code, wasi_http_types_headers_t headers, echo_result_wasi_http_types_outgoing_response_wasi_http_types_error_t *ret);
  extern void wasi_http_types_outgoing_response_write(wasi_http_types_outgoing_response_t response, echo_result_wasi_http_types_outgoing_stream_void_t *ret);
  extern void wasi_http_types_drop_future_incoming_response(wasi_http_types_future_incoming_response_t f);
  extern void wasi_http_types_future_incoming_response_get(wasi_http_types_future_incoming_response_t f, echo_option_result_wasi_http_types_incoming_response_wasi_http_types_error_t *ret);
  extern wasi_http_types_pollable_t wasi_http_types_listen_to_future_incoming_response(wasi_http_types_future_incoming_response_t f);
  
  // Exported Functions from `wasi:http/incoming-handler`
  void exports_wasi_http_incoming_handler_handle(wasi_http_incoming_handler_incoming_request_t request, wasi_http_incoming_handler_response_outparam_t response_out);
  
  // Helper Functions
  
  void echo_list_wasi_poll_poll_pollable_free(echo_list_wasi_poll_poll_pollable_t *ptr);
  void echo_list_bool_free(echo_list_bool_t *ptr);
  void echo_list_u8_free(echo_list_u8_t *ptr);
  void echo_tuple2_list_u8_wasi_io_streams_stream_status_free(echo_tuple2_list_u8_wasi_io_streams_stream_status_t *ptr);
  void echo_result_tuple2_list_u8_wasi_io_streams_stream_status_void_free(echo_result_tuple2_list_u8_wasi_io_streams_stream_status_void_t *ptr);
  void wasi_http_types_method_free(wasi_http_types_method_t *ptr);
  void wasi_http_types_scheme_free(wasi_http_types_scheme_t *ptr);
  void wasi_http_types_error_free(wasi_http_types_error_t *ptr);
  void echo_tuple2_string_list_u8_free(echo_tuple2_string_list_u8_t *ptr);
  void echo_list_tuple2_string_list_u8_free(echo_list_tuple2_string_list_u8_t *ptr);
  void echo_list_list_u8_free(echo_list_list_u8_t *ptr);
  void echo_result_wasi_http_types_trailers_wasi_http_types_error_free(echo_result_wasi_http_types_trailers_wasi_http_types_error_t *ptr);
  void echo_option_result_wasi_http_types_trailers_wasi_http_types_error_free(echo_option_result_wasi_http_types_trailers_wasi_http_types_error_t *ptr);
  void echo_result_void_wasi_http_types_error_free(echo_result_void_wasi_http_types_error_t *ptr);
  void echo_option_result_void_wasi_http_types_error_free(echo_option_result_void_wasi_http_types_error_t *ptr);
  void echo_option_string_free(echo_option_string_t *ptr);
  void echo_option_wasi_http_types_scheme_free(echo_option_wasi_http_types_scheme_t *ptr);
  void echo_result_wasi_http_types_outgoing_request_wasi_http_types_error_free(echo_result_wasi_http_types_outgoing_request_wasi_http_types_error_t *ptr);
  void echo_result_wasi_http_types_outgoing_response_wasi_http_types_error_free(echo_result_wasi_http_types_outgoing_response_wasi_http_types_error_t *ptr);
  void echo_result_wasi_http_types_incoming_response_wasi_http_types_error_free(echo_result_wasi_http_types_incoming_response_wasi_http_types_error_t *ptr);
  void echo_option_result_wasi_http_types_incoming_response_wasi_http_types_error_free(echo_option_result_wasi_http_types_incoming_response_wasi_http_types_error_t *ptr);
  // Transfers ownership of `s` into the string `ret`
  void echo_string_set(echo_string_t *ret, char*s);
  
  // Creates a copy of the input nul-terminate string `s` and
  // stores it into the component model string `ret`.
  void echo_string_dup(echo_string_t *ret, const char*s);
  
  // Deallocates the string pointed to by `ret`, deallocating
  // the memory behind the string.
  void echo_string_free(echo_string_t *ret);
  
  #ifdef __cplusplus
}
#endif
#endif
